#saml.producerCustomerCode = FY
# ----------------------------------------------------------------------------------------------------------------------
# This properties file is the SAML metadata configuration's secret twin.  We share SAML metadata with our customers
# but we never share this file with them, instead this is our way of configuring the private parts of our cross domain
# single sign on architecture.
#
# For both SAML PRODUCER CONFIGURATION and SAML CONSUMER CONFIGURATION settings, the second element of the property
# names given in this file MUST match a respective producer entity or consumer entity id in the applicable SAML metadata
# file(s) we've shared with a customer, otherwise this information here is useless and cannot be used by either an
# assertion consumer or assertion producer.  The ids are for matching all the moving parts up, so its assumed the
# codes in the SAML metadata, this file, the ResourceLink customer id, and the MyView customer id all match up.
#
# The SAML PRODUCER CONFIGURATION and SAML CONSUMER CONFIGURATION sections here are where we bind our producer and
# consumer entities to the right LOCAL keystores that hold private keys.  Producers use private  keys to sign outgoing
# SAML, and consumers use private keys to decrypt incoming SAML.
#
# For the SAML REDIRECTION CONFIGURATION settingsc here, the second element of the property name in this file need to
# match an assertion producer (the customer) and the third element needs to match an assertion consumer (the
# application) they are wanting to reach.  This way we can configure customer specific URL to redirect to for a given
# application or service within our hosting environment.
#
# The SAML REDIRECTION CONFIGURATION is also where we configure what an assertion consumer will do following
# assertion validation.  There is no point just checking the assertion received and doing nothing, we have
# to hand-off to an application that is right for the customer. So, after assertion validation, the consumer has to
# get the app to authorise the user via a service interface on the app behind the scenes, and (if successfull) has
# to then redirect the user's browser to go into the remote application via a backdoor. So this means identifying the
# URL for the service interface on the customer's instance of a remote application (say MyView) we'd use to get the
# application to authorise our user (see serviceUrl), identifying the backdoor URL (see baseUrl) into
# the application we need to redirect to following successful session creation, where we go on error, and finally
# identifying the characteristics of the cookie and transport we must use to bind the session returned from the service
# interface to the redirected request.  This last bit is crucial.  Basically, the cookie, if set correctly, will ensure
# the magic of session binding can take place on redirect arrival to the backdoor of the application, meaning our remote
# application can "magically" pickup the right logged on session for our user when it knocks on the backdoor.
#
# The cookie configuration comes in two parts, one for the temporary session indicating a user is authorised, and one
# for routing purposes within hosting.  These are the "sessionCookie" and "arrowPointCookie" sections.
#
# The "arrowPointCookie" settings are to allow for routing in our hosting network architecture. Hosting
# makes use of context switches that add an "arrowpoint" cookie to allow the route to a given application/service
# type (say MyView) for a given customer to become fixed for a given session.  So, if a user is trying to access
# TimeWarner's MyView, the first time through, the context switch will add a cookie to the exchange indicating a
# particular Apache reverse proxy should be routed via.  All subsequent requests then get routed to the right
# instance of the application for a given customer.
#
# But when a user attempts to access an application via the SAML middleware, we will redirect the customer's browser
# to the application backdoor of the right "logical" service (say MyView) for the customer following authorisation,
# so we need to tell the lunking context switch in hosting were to route to, so we can make sure the redirection
# ends up at the right instance of the application without exposing a hosting internal host URL to a customer's browser.
# So the middleware adds on the arrowpoint configuration as a cookie to the response we send back to the browser to
# ensure correct context switch routing takes place.  We have to do this, as otherwise a user could be redirected to
# an instance of an application that doesn't know anything about their temporary session.
#
# Note: The configuration currently in here is all for the example remote application included in the project.  It is
# not production quality configuration. For example, the customer specific application backdoor access points must be
# HTTPS in production, as they tell a browser in someone else's environment how to redirect through an application
# backdoor.  Its only HTTP here to allow you to test it locally.  So, don't roll this out in production without
# reading the "How do you set this up?" section below.
#
# How do you set this up?
# -----------------------
#
# 1) Use the right runtime environment: The setup currently in here assumes that the SAML assertion consumer/producer
# is running in Java 1.6.  It has currently (28/07/2010) only been tested on JBoss 5.1.0 and Tomcat 6.0.20.  See the
# WIKI at http://hrs-dev6.hrs.northgate-is.com/display/SOAStrategy/SAMLAssertion+Processing for more details.
#
# 2) Generate the keys we'll need to do decryption/encryption and signing/signature verification: SAML sent from a
# customer needs to be encrypted according to our specification at their end, and decrypted using our private key when
# it arrives, and SAML sent from a customer needs to signed at their end using their private key, and needs to be
# signature checked at ours when it arrives. The rules are, if we want a customer to encrypt data they send to us, it
# is our responsibility to generate a public/private key pair, and if a customer wants us to check their digital
# signature on incoming SAML they send to us, it is their responsibility to generate a public/private key pair.
#
# Within the project's example setup provided, two self signed key pairs have already been created for you. In order
# to run the example setup (management UI) you need to copy the two files serviceKeyStore.jks and clientKeyStore.jks
# from the fixtures/keystores directory to the JBoss conf subdirectory or Tomcat conf subdirectory.  The file
# serviceKeyStore.jks holds a sample private key used by us as a service provider to decrypt received SAML2 assertions.
# The file clientKeyStore.jks holds the private key used by an identity provider to sign outgoing SAML (both SAML1.1
# and SAML2).  Read the WIKI for more details.
#
# 3) Share your public configuration with the customer: A customer sending us assertions cannot encrypt the assertions
# without having the public key part of our key pair we've generated in the previous step, and cannot send assertions
# to us without knowing the public address of the application specific assertion consumer.  Reciprocally, we cannot
# verify the signature on any inbound SAML unless we've been given the public key part of a key pair generated by a
# customer, and we know what configuration to apply when an assertion from a given customer arrives in our
# infrastructure. This is what the SAML metadata is for. See idp_and_sp_metadata.xml in fixtures/metadata for the
# example details.  This file holds the two public keys (one for signature verification and one for encryption)
# expressed as X509Certificates and provides the public facing URL a customer uses to address our application
# specific assertion consumers.
#
# How did we generate the self-signed certificate information in the metadata?: This was done using part of the script
# createKeyStores.bash in fixtures/scripts.  The lines in this script that do the "export" command, create certificate
# files.  You should see that the content of those certificate files (under fixtures/keystores/*.cer) is exactly the
# same as the X509 sections in the metadata.  So, the customer sends us the metadata for entity, say "idp_saml2" which
# is responsible for sending us SAML, and we send them the entity descriptor for say "myview".  The entity descriptor
# for "idp_saml2" holds the public certificate we would use for checking the signature of anything they send us, and
# the entity descriptor for "MyView" holds the public certificate they would use to encrypt SAML they send to us.
#
# Note that in the metadata file provided with the project, the endpoints are local URL on my development machine.
# If you want to run the example infrastructure locally, change the URLs to point to your own FQDN, not my machine.
#
# In production terms these endpoint URL MUST be HTTPS and MUST be public facing internet ready URL provided by hosting
# that define the addressable entry points for application specific SAML assertion consumption within our hosting
# environment.  They aren't URL you decide, but hosting decide on for you prior to you sending the customer the entity
# descriptor for our assertion consumer service (say "MyView").
#
# So, due to our hosting network architecture, this means the customer will get a metadata entity description we send
# them describing say "MyView" that MUST include the publically addressable endpoints, and we on the host(s) that
# hold our SAMLAssertion consumer will have "almost" the same entity description for MyView.  I say "almost" as the
# key difference will be that our local metadata held by the consumer inside our hosting infrastructure will need to
# hold the LOCAL URL for the endpoints, as by the time the request gets from the public address the customer uses on
# the edge of hosting to the SAML assertion consumer buried deep within hosting behind the context switch and reverse
# proxy, the URL will be completely different, or LOCAL.
#
# This isn't an issue if testing the setup locally, but is a big issue in production deployments.  If testing locally
# just amend ALL the location URL in the metadata to your local machine FQDN (Fully Qualified Domain Name) and then
# copy the file inot your JBOSS or Tomcat conf directory, so it can be picked up by the assertion producer pretending
# to be a customer, and the official MyView assertion consumer.
#
# 4) Copy this file into the Tomcat/JBoss conf directory if testing locally.  If in a production setup in hosting
# this file would need to hold amended and valid details for all the options below.
#
# 5) Test this middleware with the dummy application the build comes with.  Navigate to
# http://middlewarehost:port/SAMLWeb to show the management UI and follow the options there.
#
# 6) Test the middleware with the target application within hosting.
#
# 7) Provide the customer with the public facing metadatav to allow them to route through to the consumer.
#
# 8) Acceptance test with the customer to ensure an assertion from the customer allows access to the application
# ----------------------------------------------------------------------------------------------------------------------
#

# ================================================
#           SAML PRODUCER CONFIGURATION
# ================================================
# Example configuration for an assertion producer configuration for a SAML2 producer (idp_saml2).  So this is the
# example configuration for a customer (client) who is sending us SAML2 assertions.  The keystore is where they
# get their private key for signing outgoing SAML they sends to us, and the metadata file holds their entity
# descriptor "idp_saml2" they will share with us as their side of the public trust relationship.  Currently only
# Aurora will be creating assertions anytime soon, as its our side of accessing someone else's services. Although
# this information is also a key for the Management UI that allows you to test the middleware deployment without
# relying on a customer.
# ================================================
saml.idp_saml2.metadataFileName = idp_and_sp_metadata.xml
saml.idp_saml2.keyStoreName = clientKeyStore.jks
saml.idp_saml2.keyStorePassword = rmi+ssl
saml.idp_saml2.signingKeyAlias = localclient
saml.idp_saml2.signingKeyPassword = localclient

# Example configuration for an assertion producer configuration for a SAML1.1 producer (idp_saml11).  From a coding
# perspective, the code required to produce SAML1.1 is similar to the code required to produce SAML2, but it is NOT
# the same, hence two ProducerServlets, SAML11AssertionProducerServlet and SAML2AssertionProducerServlet.
saml.idp_saml11.metadataFileName = idp_and_sp_metadata.xml
saml.idp_saml11.keyStoreName = clientKeyStore.jks
saml.idp_saml11.keyStorePassword = rmi+ssl
saml.idp_saml11.signingKeyAlias = localclient
saml.idp_saml11.signingKeyPassword = localclient

saml.NZ.metadataFileName = idp_and_sp_metadata.xml
saml.NZ.keyStoreName = clientKeyStore.jks
saml.NZ.keyStorePassword = rmi+ssl
saml.NZ.signingKeyAlias = tw
saml.NZ.signingKeyPassword = timewarner

# Custom (bespoke) producer configuration for Goldman Sachs
saml.GA.sharedKey = ABCDE123435678FGHIJKLM9876543210ABCDEFGH
saml.GA.acceptableTimeDrift = 120
saml.GA.module = payslips

# British Airways
saml.FY.metadataFileName = idp_and_sp_metadata.xml
saml.FY.keyStoreName = clientKeyStore.jks
saml.FY.keyStorePassword = rmi+ssl
saml.FY.signingKeyAlias = localclient
saml.FY.signingKeyPassword = localclient

# ================================================
#           SAML CONSUMER CONFIGURATION
# ================================================
# Example configuration for the MyView assertion consumer service that can take both SAML2 and SAML1.1 for a specific
# application in hosting (myview).   The keystore is where we keep our private key we'd use to decrypt encrypted
# SAML assertions sent to us by customers, and the metadataFileName is where our LOCAL entity definition lives.
#
# Remember, in a production environment we'd share our metadata entity description with a customer ONLY after we've
# got hosting to tell us what the PUBLIC URL should be for our assertion consumer service end points.  There's no
# point sending a customer the associated metadata if the URL in the entity description for the assertion consumers
# are publically unreachable from outside hosting.
# ================================================
saml.MyView.metadataFileName = idp_and_sp_metadata.xml
saml.MyView.keyStoreName = serviceKeyStore.jks
saml.MyView.keyStorePassword = rmi+ssl
saml.MyView.decryptionKeyAlias = remoteservice
saml.MyView.decryptionKeyPassword = remoteservice

saml.DummyApp.metadataFileName = idp_and_sp_metadata.xml
saml.DummyApp.keyStoreName = serviceKeyStore.jks
saml.DummyApp.keyStorePassword = rmi+ssl
saml.DummyApp.decryptionKeyAlias = remoteservice
saml.DummyApp.decryptionKeyPassword = remoteservice

saml.SoakConsumer.metadataFileName = idp_and_sp_metadata.xml
saml.SoakConsumer.keyStoreName = serviceKeyStore.jks
saml.SoakConsumer.keyStorePassword = rmi+ssl
saml.SoakConsumer.decryptionKeyAlias = remoteservice
saml.SoakConsumer.decryptionKeyPassword = remoteservice

saml.WebView.metadataFileName = idp_and_sp_metadata.xml
saml.WebView.keyStoreName = serviceKeyStore.jks
saml.WebView.keyStorePassword = rmi+ssl
saml.WebView.decryptionKeyAlias = remoteservice
saml.WebView.decryptionKeyPassword = remoteservice

# ================================================
#           SAML REDIRECTION CONFIGURATION
# ================================================
# For every customer (a producer of SAML) that wants to access a given application via an application's assertion
# consumer proxy there needs to be information regarding how we hand-off to the application following assertion
# validation. So for each application the customer wants to access, there needs to be customer and application
# specific information on the following:
#
# 1) baseUrl: For a given customer, the baseUrl of the target application needs to be known.  This is a backdoor
# entry point to the applicable target application for a customer and is used by an application assertion consumer when
# redirecting a user's browser following successfull application session authorisation.  In production this MUST be an
# HTTPS address as it needs to be a secure redirection.
#
# 2) serviceUrl: For a given customer, the back-channel Url to the target application from where we can get hold of a
# temporary HTTP session that indicates the user is authorised to view the application.  In production, this needn't
# be an HTTPS connection as its all within the middleware to application flow.
#
# 3) errorUrl: The URL our middleware will redirect the user's browser to if there is an error in the processing,
# either in terms of assertion validation, or in terms of silent login failure. In production this my well be a public
# URL on the CUSTOMER's login site, or could be a page on the middleware (as here).  Its up to the customer, and the
# operating parameters of the hosting environment within which their application is deployed.
#
# 4)sessionCookieDomain: This should be the domain of the target application so we can be specific about how the
# cookie is made available to the user's browser on redirection.
#
# 5) sessionCookiePath: This should be the URL path under which the cookie becomes active/accessible.  So for
# MyView for example, think MyView/concerto.  This setting allows us to use multiple JSESSIONID values for multiple
# applications each of which have a different sessionCookiePath (within the application) URL.  So that makes the
# cookie accessible and unique per application.
#
# 6) sessionCookieName: Non Java based applications may well NOT use JSESSIONID as the application's cookie name, so
# the cookie name must be provided for the assertion consumer.
#
# 7) sessionCookieSecureFlag: Should we be sending the cookie out securely?  This depends on whether the URL in the
# baseUrl is an HTTPS call or not.  If it is, then this should be true, otherwise then this should be false.  For
# development and local testing purposes this is false.  For production it MUST be true.
#
# 8) arrowPointCookieDomain: The domain to which the arrowpoint cookie used by hosting's context switch applies.  This
# would usually be the FQDN of the service/application the context switch redirects to.  If testing make sure this
# points to your box's FQDN (as in this example).
#
# 9) arrowPointCookiePath: The default for this is "/"
#
# 10) arrowPointCookieName: The default for this is ARPT
#
# 11) arrowPointCookieValue: The value for the arrow point cookie.  This value maps an instance of MyView for a given
# customer from the context switch in hosting, and the correct values will only be known by them.
#
# 12) arrowPointSecureFlag: The URL to the application backdoor will (in production) be HTTPS, so this is normally
# true.
# ================================================

# Example routing configuration for management UI SAML2 producer to DummyApp consumer
saml.idp_saml2.DummyApp.baseUrl = http://pc33767.uk.rebushr.com:8090/DummyApp/backdoor
saml.idp_saml2.DummyApp.serviceUrl = http://pc33767.uk.rebushr.com:8090/DummyApp/services
saml.idp_saml2.DummyApp.errorUrl = http://pc33767.uk.rebushr.com:8090/SAMLWeb/error.jsp
saml.idp_saml2.DummyApp.sessionCookieDomain = pc33767.uk.rebushr.com
saml.idp_saml2.DummyApp.sessionCookiePath = /DummyApp/
saml.idp_saml2.DummyApp.sessionCookieName = JSESSIONID
saml.idp_saml2.DummyApp.sessionCookieSecureFlag = false
saml.idp_saml2.DummyApp.arrowPointCookieDomain = pc33767.uk.rebushr.com
saml.idp_saml2.DummyApp.arrowPointCookiePath = /
saml.idp_saml2.DummyApp.arrowPointCookieName = ARPT
saml.idp_saml2.DummyApp.arrowPointCookieValue = servicehostarptmappingvalue
saml.idp_saml2.DummyApp.arrowPointCookieSecureFlag = false

# Example routing configuration for management UI SAML1.1 producer to DummyApp consumer
saml.idp_saml11.DummyApp.baseUrl = http://pc33767.uk.rebushr.com:8090/DummyApp/backdoor
saml.idp_saml11.DummyApp.serviceUrl = http://pc33767.uk.rebushr.com:8090/DummyApp/services
saml.idp_saml11.DummyApp.errorUrl = http://pc33767.uk.rebushr.com:8090/SAMLWeb/error.jsp
saml.idp_saml11.DummyApp.sessionCookieDomain = pc33767.uk.rebushr.com
saml.idp_saml11.DummyApp.sessionCookiePath = /DummyApp/
saml.idp_saml11.DummyApp.sessionCookieName = JSESSIONID
saml.idp_saml11.DummyApp.sessionCookieSecureFlag = false
saml.idp_saml11.DummyApp.arrowPointCookieDomain = pc33767.uk.rebushr.com
saml.idp_saml11.DummyApp.arrowPointCookiePath = /
saml.idp_saml11.DummyApp.arrowPointCookieName = ARPT
saml.idp_saml11.DummyApp.arrowPointCookieValue = servicehostarptmappingvalue
saml.idp_saml11.DummyApp.arrowPointCookieSecureFlag = false

# Example Time Warner routing configuration for DummyApplication service
saml.NZ.DummyApp.baseUrl = http://pc33767.uk.rebushr.com:8090/DummyApp/backdoor
saml.NZ.DummyApp.serviceUrl = http://pc33767.uk.rebushr.com:8090/DummyApp/services
saml.NZ.DummyApp.errorUrl = http://pc33767.uk.rebushr.com:8090/SAMLWeb/error.jsp
saml.NZ.DummyApp.sessionCookieDomain = pc33767.uk.rebushr.com
saml.NZ.DummyApp.sessionCookiePath = /DummyApp/
saml.NZ.DummyApp.sessionCookieName = JSESSIONID
saml.NZ.DummyApp.sessionCookieSecureFlag = false
saml.NZ.DummyApp.arrowPointCookieDomain = pc33767.uk.rebushr.com
saml.NZ.DummyApp.arrowPointCookiePath = /
saml.NZ.DummyApp.arrowPointCookieName = ARPT
saml.NZ.DummyApp.arrowPointCookieValue = servicehostarptmappingvalue
saml.NZ.DummyApp.arrowPointCookieSecureFlag = false

# Example Time Warner routing configuration for MyView service
saml.NZ.MyView.baseUrl = http://pc33767.uk.rebushr.com:8080/concerto/Portal/saml.xsp
saml.NZ.MyView.serviceUrl = http://pc33767.uk.rebushr.com:8080/concerto/service
saml.NZ.MyView.errorUrl = http://pc33767.uk.rebushr.com:8090/SAMLWeb/error.jsp
saml.NZ.MyView.sessionCookieDomain = pc33767.uk.rebushr.com
saml.NZ.MyView.sessionCookiePath = /concerto/
saml.NZ.MyView.sessionCookieName = JSESSIONID
saml.NZ.MyView.sessionCookieSecureFlag = false
saml.NZ.MyView.arrowPointCookieDomain = pc33767.uk.rebushr.com
saml.NZ.MyView.arrowPointCookiePath = /
saml.NZ.MyView.arrowPointCookieName = ARPT
saml.NZ.MyView.arrowPointCookieValue = servicehostarptmappingvalue
saml.NZ.MyView.arrowPointCookieSecureFlag = false

# Example Goldman Sachs routing configuration for DummyApplication service
saml.GA.DummyApp.baseUrl = http://pc33767.uk.rebushr.com:8090/DummyApp/backdoor
saml.GA.DummyApp.serviceUrl = http://pc33767.uk.rebushr.com:8090/DummyApp/services
saml.GA.DummyApp.errorUrl = http://pc33767.uk.rebushr.com:8090/SAMLWeb/error.jsp
saml.GA.DummyApp.sessionCookieDomain = pc33767.uk.rebushr.com
saml.GA.DummyApp.sessionCookiePath = /DummyApp/
saml.GA.DummyApp.sessionCookieName = JSESSIONID
saml.GA.DummyApp.sessionCookieSecureFlag = false
saml.GA.DummyApp.arrowPointCookieDomain = pc33767.uk.rebushr.com
saml.GA.DummyApp.arrowPointCookiePath = /
saml.GA.DummyApp.arrowPointCookieName = ARPT
saml.GA.DummyApp.arrowPointCookieValue = servicehostarptmappingvalue
saml.GA.DummyApp.arrowPointCookieSecureFlag = false

# Example Goldman Sachs routing configuration for MyView service
saml.GA.MyView.baseUrl = http://pc33767.uk.rebushr.com:8080/concerto/Portal/saml.xsp
saml.GA.MyView.serviceUrl = http://pc33767.uk.rebushr.com:8080/concerto/service
saml.GA.MyView.errorUrl = http://pc33767.uk.rebushr.com:8090/SAMLWeb/error.jsp
saml.GA.MyView.sessionCookieDomain = pc33767.uk.rebushr.com
saml.GA.MyView.sessionCookiePath = /concerto/
saml.GA.MyView.sessionCookieName = JSESSIONID
saml.GA.MyView.sessionCookieSecureFlag = false
saml.GA.MyView.arrowPointCookieDomain = pc33767.uk.rebushr.com
saml.GA.MyView.arrowPointCookiePath = /
saml.GA.MyView.arrowPointCookieName = ARPT
saml.GA.MyView.arrowPointCookieValue = servicehostarptmappingvalue
saml.GA.MyView.arrowPointCookieSecureFlag = false

# Example British Airways DummyApplication service
saml.FY.DummyApp.baseUrl = http://pc33767.uk.rebushr.com:8090/DummyApp/backdoor
saml.FY.DummyApp.serviceUrl = http://pc33767.uk.rebushr.com:8090/DummyApp/services
saml.FY.DummyApp.errorUrl = http://pc33767.uk.rebushr.com:8090/SAMLWeb/error.jsp
saml.FY.DummyApp.sessionCookieDomain = pc33767.uk.rebushr.com
saml.FY.DummyApp.sessionCookiePath = /DummyApp/
saml.FY.DummyApp.sessionCookieName = JSESSIONID
saml.FY.DummyApp.sessionCookieSecureFlag = false
saml.FY.DummyApp.arrowPointCookieDomain = pc33767.uk.rebushr.com
saml.FY.DummyApp.arrowPointCookiePath = /
saml.FY.DummyApp.arrowPointCookieName = ARPT
saml.FY.DummyApp.arrowPointCookieValue = servicehostarptmappingvalue
saml.FY.DummyApp.arrowPointCookieSecureFlag = false

# Example British Airways routing configuration for WebView (Aurora) service
saml.FY.WebView.baseUrl = https://pc33767.uk.rebushr.com:8443/aurora/createSession
saml.FY.WebView.serviceUrl = http://pc33767.uk.rebushr.com:8080/aurora/service
saml.FY.WebView.errorUrl = http://pc33767.uk.rebushr.com:8090/SAMLWeb/error.jsp
saml.FY.WebView.sessionCookieDomain = pc33767.uk.rebushr.com
saml.FY.WebView.sessionCookiePath = /aurora/
saml.FY.WebView.sessionCookieName = JSESSIONID
saml.FY.WebView.sessionCookieSecureFlag = false
saml.FY.WebView.arrowPointCookieDomain = pc33767.uk.rebushr.com
saml.FY.WebView.arrowPointCookiePath = /
saml.FY.WebView.arrowPointCookieName = ARPT
saml.FY.WebView.arrowPointCookieValue = servicehostarptmappingvalue
saml.FY.WebView.arrowPointCookieSecureFlag = false
